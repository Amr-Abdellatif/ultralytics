# YOLOv8 LightAttn v1 Model Configuration
# Uses LightAttn with configurable attention bottleneck for efficient channel attention

# Parameters
nc: 80  # number of classes
scales:  # model compound scaling constants
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]  # For yolov8n-light-v1
  s: [0.33, 0.50, 1024]  # For yolov8s-light-v1
  m: [0.67, 0.75, 768]   # For yolov8m-light-v1
  l: [1.00, 1.00, 512]   # For yolov8l-light-v1
  x: [1.00, 1.25, 512]   # For yolov8x-light-v1

# YOLOv8 LightAttn v1 backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]]           # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]]          # 1-P2/4
  - [-1, 3, LightAttn, [128, True, 1, 0.5, 0.25]]   # 2 - LightAttn with configurable bottleneck
  - [-1, 1, Conv, [256, 3, 2]]          # 3-P3/8
  - [-1, 6, LightAttn, [256, True, 1, 0.5, 0.25]]   # 4 - LightAttn with configurable bottleneck
  - [-1, 1, Conv, [512, 3, 2]]          # 5-P4/16
  - [-1, 6, LightAttn, [512, True, 1, 0.5, 0.25]]   # 6 - LightAttn with configurable bottleneck
  - [-1, 1, Conv, [1024, 3, 2]]         # 7-P5/32
  - [-1, 3, LightAttn, [1024, True, 1, 0.5, 0.25]]  # 8 - LightAttn with configurable bottleneck
  - [-1, 1, SPPF, [1024, 5]]            # 9

# YOLOv8 LightAttn v1 head
head:
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 6], 1, Concat, [1]]           # cat backbone P4
  - [-1, 3, LightAttn, [512, False, 1, 0.5, 0.25]]  # 12 - LightAttn for feature fusion

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 4], 1, Concat, [1]]           # cat backbone P3
  - [-1, 3, LightAttn, [256, False, 1, 0.5, 0.25]]  # 15 - LightAttn for feature fusion

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 12], 1, Concat, [1]]          # cat head P4
  - [-1, 3, LightAttn, [512, False, 1, 0.5, 0.25]]  # 18 - LightAttn for feature fusion

  - [-1, 1, Conv, [512, 3, 2]]
  - [[-1, 9], 1, Concat, [1]]           # cat head P5
  - [-1, 3, LightAttn, [1024, False, 1, 0.5, 0.25]] # 21 - LightAttn for feature fusion

  - [[15, 18, 21], 1, Detect, [nc]]     # Detect(P3, P4, P5)